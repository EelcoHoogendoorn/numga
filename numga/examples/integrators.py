

def RK1(f, y, h):
	return y + f(y) * h


def RK4(f, y, h):
	k1 = f(y)
	k2 = f(y + 0.5 * h * k1)
	k3 = f(y + 0.5 * h * k2)
	k4 = f(y + h * k3)
	return y + (h / 3) * (k2 + k3 + (k1 + k4) * 0.5)


def RK8(func, y, h):
	k_1 = func(y)
	k_2 = func(y + (h * 4 / 27) * k_1)
	k_3 = func(y + (h / 18) * (k_1 + 3 * k_2))
	k_4 = func(y + (h / 12) * (k_1 + 3 * k_3))
	k_5 = func(y + (h / 8) * (k_1 + 3 * k_4))
	k_6 = func(y + (h / 54) * (13 * k_1 - 27 * k_3 + 42 * k_4 + 8 * k_5))
	k_7 = func(y + (h / 4320) * (389 * k_1 - 54 * k_3 + 966 * k_4 - 824 * k_5 + 243 * k_6))
	k_8 = func(y + (h / 20) * (-234 * k_1 + 81 * k_3 - 1164 * k_4 + 656 * k_5 - 122 * k_6 + 800 * k_7))
	k_9 = func(y + (h / 288) * (-127 * k_1 + 18 * k_3 - 678 * k_4 + 456 * k_5 - 9 * k_6 + 576 * k_7 + 4 * k_8))
	k_10 = func(y + (h / 820) * (
			1481 * k_1 - 81 * k_3 + 7104 * k_4 - 3376 * k_5 + 72 * k_6 - 5040 * k_7 - 60 * k_8 + 720 * k_9))
	y = y + h / 840 * (41 * k_1 + 27 * k_4 + 272 * k_5 + 27 * k_6 + 216 * k_7 + 216 * k_9 + 41 * k_10)
	return y
